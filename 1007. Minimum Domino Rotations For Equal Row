Question:- https://leetcode.com/problems/minimum-domino-rotations-for-equal-row/description/

class Solution {
public:
    int minDominoRotations(vector<int>& tops, vector<int>& bottoms) {
        int n = tops.size();
        vector<int> freq(7, 0);
        for(int i=0; i<n; i++){
            if(tops[i] == bottoms[i]){ 
                freq[tops[i]]++;
            }
            else{
                freq[tops[i]]++;
                freq[bottoms[i]]++;
            }
        }
        int max_freq = -1;
        int num = -1;
        bool b = false;
        for(int i=1; i<=6; i++){
            int it = freq[i];
            if(it > max_freq){
                max_freq = it;
                num = i;
            }
            if(it >= n) b = true;
        }
        if(!b) return -1;
        int min_swap = INT_MAX;
        vector<int> nums;
        for(int i=1; i<=6; i++){
            if(freq[i] == max_freq) nums.push_back(i);
        }
        int t = 0;
        int bot = 0;
        for(int i=0; i<n; i++){
            if(tops[i] != num) t++;
            else if(bottoms[i] != num) bot++;
        }
        min_swap = min(min_swap, min(t, bot));
        return min_swap;
    }
};
