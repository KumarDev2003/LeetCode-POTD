Question link:- https://leetcode.com/problems/maximum-number-of-points-from-grid-queries/description/

Video link:- coming soon...

class Solution {
public:
    int m;
    int n;
    vector<pair<int, int>> dir = {{0,1}, {1,0}, {0,-1}, {-1,0}};
    priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> q;

    int bfs(vector<vector<int>>& grid, vector<vector<int>>& visit, int x){
        int cnt = 0;
        if(q.empty() && grid[0][0] < x && visit[0][0] == 0){
            q.push({grid[0][0], 0, 0});
            visit[0][0] = 1;
        }
        while(!q.empty()){
            auto el = q.top();
            int num = el[0];
            int i = el[1];
            int j = el[2];
            if(num >= x) return cnt;
            cnt++;
            q.pop();
            for(auto it : dir){
                int ni = i + it.first;
                int nj = j + it.second;
                if(ni >= 0 && ni < m && nj >= 0 && nj < n && visit[ni][nj] == 0){
                    visit[ni][nj] = 1;
                    q.push({grid[ni][nj], ni, nj});
                }
            }
        }
        return cnt;
    }
    vector<int> maxPoints(vector<vector<int>>& grid, vector<int>& queries) {
        m = grid.size();
        n = grid[0].size();
        vector<vector<int>> visit(m, vector<int>(n, 0));
        vector<pair<int, int>> arr;
        for(int i=0; i<queries.size(); i++){
            arr.push_back({queries[i], i});
        }
        sort(arr.begin(), arr.end());
        vector<pair<int, int>> a;
        int prev = 0;
        for(const auto & it : arr){
            int el = it.first;
            int idx = it.second;
            int cnt = bfs(grid, visit, el);
            prev += cnt;
            a.push_back({idx, prev});
        }
        sort(a.begin(), a.end());
        vector<int> ans;
        for(const auto & it : a){
            ans.push_back(it.second);
        }
        return ans;
    }
};
