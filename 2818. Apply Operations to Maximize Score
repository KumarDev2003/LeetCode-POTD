Question link:- https://leetcode.com/problems/apply-operations-to-maximize-score/

Vide link:- Coming soon...

struct Compare {
    bool operator()(const vector<long long>& a, const vector<long long>& b) const {
        if(a[0] == b[0])
            return a[1] > b[1];
        return a[0] < b[0];
    }
};

class Solution {
public:
    int prime(int n, vector<int>& spf) {
        int cnt = 0;
        while(n > 1){
            int factor = spf[n];
            cnt++;
            while(n % factor == 0){
                n /= factor;
            }
        }
        return cnt;
    }
    
    void next_greater(vector<int>& nums, vector<int>& nge, vector<int>& prime_score, int n){
        stack<int> st;
        for(int i = n - 1; i >= 0; i--){
            while(!st.empty() && prime_score[st.top()] <= prime_score[i]){
                st.pop();
            }
            nge[i] = st.empty() ? n : st.top();
            st.push(i);
        }
    }
    
    void prev_greater(vector<int>& nums, vector<int>& pge, vector<int>& prime_score, int n){
        stack<int> st;
        for(int i = 0; i < n; i++){
            while(!st.empty() && prime_score[st.top()] < prime_score[i]){
                st.pop();
            }
            pge[i] = st.empty() ? -1 : st.top();
            st.push(i);
        }
    }
    
    long long modPow(long long base, long long exp, int mod) {
        long long result = 1;
        base %= mod;
        while(exp > 0) {
            if(exp & 1)
                result = (result * base) % mod;
            base = (base * base) % mod;
            exp >>= 1;
        }
        return result;
    }
    
    int maximumScore(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> prime_score(n), nge(n), pge(n);
        vector<long long> dom(n);
        int max_val = *max_element(nums.begin(), nums.end());
        vector<int> spf(max_val + 1);
        for (int i = 0; i <= max_val; i++) spf[i] = i;
        for (int i = 2; i * i <= max_val; i++){
            if (spf[i] == i){
                for (int j = i * i; j <= max_val; j += i){
                    if (spf[j] == j)
                        spf[j] = i;
                }
            }
        }
        priority_queue<vector<long long>, vector<vector<long long>>, Compare> pq;
        for(int i = 0; i < n; i++){
            prime_score[i] = prime(nums[i], spf);
        }
        next_greater(nums, nge, prime_score, n);
        prev_greater(nums, pge, prime_score, n);
        for(int i = 0; i < n; i++){
            dom[i] = (long long)(nge[i] - i) * (i - pge[i]);
            pq.push({nums[i], i, dom[i]});
        }
        int mod = 1e9 + 7;
        long long score = 1;
        while(k > 0 && !pq.empty()){
            auto el = pq.top();
            pq.pop();
            int num = el[0];
            long long freq = el[2];
            if(k <= freq) {
                score = (score * modPow(num, k, mod)) % mod;
                k = 0;
            } else {
                score = (score * modPow(num, freq, mod)) % mod;
                k -= freq;
            }
        }
        return score;
    }
};
